#!/usr/bin/env python
import click

from sentry.runner import configure

configure()

from django.conf import settings

from sentry import buffer, roles
from sentry.signals import mocks_loaded
from sentry.utils import mockdata


def main(
    skip_default_setup=False,
    num_events=1,
    extra_events=False,
    load_trends=False,
    load_performance_issues=False,
    slow=False,
):
    owner = mockdata.get_superuser()
    user = mockdata.create_user()
    mockdata.create_broadcast()

    organization = mockdata.get_organization()
    mockdata.create_member(organization, owner)
    member = mockdata.create_member(organization, user, role=roles.get_default().id)

    project_map = mockdata.generate_projects(organization)
    if not skip_default_setup:
        for project in project_map.values():
            environment = mockdata.create_environment(project)
            mockdata.create_monitor(project, environment)
            mockdata.create_access_request(member, project.teams.first())

            mockdata.generate_tombstones(project, user)
            release = mockdata.create_release(project)
            repo = mockdata.create_repository(organization)
            raw_commits = mockdata.generate_commit_data(user)
            mockdata.populate_release(
                project=project,
                environment=environment,
                repository=repo,
                release=release,
                user=user,
                commits=raw_commits,
            )
            mockdata.create_metric_alert_rule(organization, project)
            events = mockdata.generate_events(
                project=project,
                release=release,
                repository=repo,
                user=user,
                num_events=num_events,
                extra_events=extra_events,
            )
            for event in events:
                mockdata.create_sample_time_series(event, release=release)

            if hasattr(buffer, "process_pending"):
                click.echo("    > Processing pending buffers")  # NOQA
                buffer.process_pending()

            mocks_loaded.send(project=project, sender=__name__)

    mockdata.create_mock_transactions(project_map, load_trends, load_performance_issues, slow)
    mockdata.create_system_time_series()


if __name__ == "__main__":
    settings.CELERY_ALWAYS_EAGER = True

    from optparse import OptionParser

    parser = OptionParser()
    parser.add_option("--events", default=1, type=int, help="number of events to generate")
    parser.add_option(
        "--skip-default-setup",
        default=False,
        action="store_true",
        help="Skips creating the default project, teams and timeseries, useful when only loading specific transactions",
    )
    parser.add_option(
        "--extra-events",
        default=False,
        action="store_true",
        help="add multiple events for each error group",
    )
    parser.add_option(
        "--load-trends",
        default=False,
        action="store_true",
        help="load multiple transactions for each id to show trends",
    )
    parser.add_option(
        "--load-performance-issues",
        default=False,
        action="store_true",
        help="load transactions with performance issues, still needs options/flags on for issues to appear.",
    )
    parser.add_option(
        "--slow",
        default=False,
        action="store_true",
        help="sleep between each transaction to let clickhouse rest",
    )

    (options, args) = parser.parse_args()

    try:
        main(
            skip_default_setup=options.skip_default_setup,
            num_events=options.events,
            extra_events=options.extra_events,
            load_trends=options.load_trends,
            load_performance_issues=options.load_performance_issues,
            slow=options.slow,
        )
    except Exception:
        # Avoid reporting any issues recursively back into Sentry
        import sys
        import traceback

        traceback.print_exc()
        sys.exit(1)
